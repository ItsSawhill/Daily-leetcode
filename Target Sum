# LeetCode Problem: Target Sum (ID: 494)
# Difficulty: Medium
# Topics: Dynamic Programming, Backtracking
# 
# Problem Description:
# You are given an integer array nums and an integer target.
# You want to build an expression out of nums by adding one of the symbols '+' and '-' 
# before each integer in nums and then concatenate all the integers.
#
# For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 
# and concatenate them to build the expression "+2-1".
#
# Return the number of different expressions that you can build, which evaluates to target.
#
# Link to the problem: https://leetcode.com/problems/target-sum/
#Solution
class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        # Dictionary to memoize results of subproblems
        dp = {}

        # Helper function for backtracking
        def backtracking(i, total):
            # Base case: If all numbers are used, check if the total matches the target
            if i == len(nums):
                return 1 if total == target else 0
            
            # Return memoized result if it exists
            if (i, total) in dp:
                return dp[(i, total)]

            # Calculate the number of ways by adding or subtracting the current number
            dp[(i, total)] = (
                backtracking(i + 1, total + nums[i]) +  # Add current number
                backtracking(i + 1, total - nums[i])    # Subtract current number
            )
            return dp[(i, total)]  # Store and return the result for the current state
        
        # Start backtracking from the first index with a total of 0
        return backtracking(0, 0)
